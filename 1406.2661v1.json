{
  "filename": "1406.2661v1.pdf",
  "num_pages": 9,
  "pages": [
    "Generative Adversarial Nets\nIan J. Goodfellow, Jean Pouget-Abadie∗, Mehdi Mirza, Bing Xu, David Warde-Farley,\nSherjil Ozair†, Aaron Courville, Yoshua Bengio‡\nD´epartement d’informatique et de recherche op´erationnelle\nUniversit´e de Montr´eal\nMontr´eal, QC H3C 3J7\nAbstract\nWe propose a new framework for estimating generative models via an adversar-\nial process, in which we simultaneously train two models: a generative model G\nthat captures the data distribution, and a discriminative model D that estimates\nthe probability that a sample came from the training data rather than G. The train-\ning procedure for G is to maximize the probability of D making a mistake. This\nframework corresponds to a minimax two-player game. In the space of arbitrary\nfunctions G and D, a unique solution exists, with G recovering the training data\ndistribution and D equal to 1\n2 everywhere. In the case where G and D are deﬁned\nby multilayer perceptrons, the entire system can be trained with backpropagation.\nThere is no need for any Markov chains or unrolled approximate inference net-\nworks during either training or generation of samples. Experiments demonstrate\nthe potential of the framework through qualitative and quantitative evaluation of\nthe generated samples.\n1\nIntroduction\nThe promise of deep learning is to discover rich, hierarchical models [2] that represent probability\ndistributions over the kinds of data encountered in artiﬁcial intelligence applications, such as natural\nimages, audio waveforms containing speech, and symbols in natural language corpora. So far, the\nmost striking successes in deep learning have involved discriminative models, usually those that\nmap a high-dimensional, rich sensory input to a class label [14, 22]. These striking successes have\nprimarily been based on the backpropagation and dropout algorithms, using piecewise linear units\n[19, 9, 10] which have a particularly well-behaved gradient . Deep generative models have had less\nof an impact, due to the difﬁculty of approximating many intractable probabilistic computations that\narise in maximum likelihood estimation and related strategies, and due to difﬁculty of leveraging\nthe beneﬁts of piecewise linear units in the generative context. We propose a new generative model\nestimation procedure that sidesteps these difﬁculties. 1\nIn the proposed adversarial nets framework, the generative model is pitted against an adversary: a\ndiscriminative model that learns to determine whether a sample is from the model distribution or the\ndata distribution. The generative model can be thought of as analogous to a team of counterfeiters,\ntrying to produce fake currency and use it without detection, while the discriminative model is\nanalogous to the police, trying to detect the counterfeit currency. Competition in this game drives\nboth teams to improve their methods until the counterfeits are indistiguishable from the genuine\narticles.\n∗Jean Pouget-Abadie is visiting Universit´e de Montr´eal from Ecole Polytechnique.\n†Sherjil Ozair is visiting Universit´e de Montr´eal from Indian Institute of Technology Delhi\n‡Yoshua Bengio is a CIFAR Senior Fellow.\n1All code and hyperparameters available at http://www.github.com/goodfeli/adversarial\n1\narXiv:1406.2661v1  [stat.ML]  10 Jun 2014\n",
    "This framework can yield speciﬁc training algorithms for many kinds of model and optimization\nalgorithm. In this article, we explore the special case when the generative model generates samples\nby passing random noise through a multilayer perceptron, and the discriminative model is also a\nmultilayer perceptron. We refer to this special case as adversarial nets. In this case, we can train\nboth models using only the highly successful backpropagation and dropout algorithms [17] and\nsample from the generative model using only forward propagation. No approximate inference or\nMarkov chains are necessary.\n2\nRelated work\nAn alternative to directed graphical models with latent variables are undirected graphical models\nwith latent variables, such as restricted Boltzmann machines (RBMs) [27, 16], deep Boltzmann\nmachines (DBMs) [26] and their numerous variants.\nThe interactions within such models are\nrepresented as the product of unnormalized potential functions, normalized by a global summa-\ntion/integration over all states of the random variables. This quantity (the partition function) and\nits gradient are intractable for all but the most trivial instances, although they can be estimated by\nMarkov chain Monte Carlo (MCMC) methods. Mixing poses a signiﬁcant problem for learning\nalgorithms that rely on MCMC [3, 5].\nDeep belief networks (DBNs) [16] are hybrid models containing a single undirected layer and sev-\neral directed layers. While a fast approximate layer-wise training criterion exists, DBNs incur the\ncomputational difﬁculties associated with both undirected and directed models.\nAlternative criteria that do not approximate or bound the log-likelihood have also been proposed,\nsuch as score matching [18] and noise-contrastive estimation (NCE) [13]. Both of these require the\nlearned probability density to be analytically speciﬁed up to a normalization constant. Note that\nin many interesting generative models with several layers of latent variables (such as DBNs and\nDBMs), it is not even possible to derive a tractable unnormalized probability density. Some models\nsuch as denoising auto-encoders [30] and contractive autoencoders have learning rules very similar\nto score matching applied to RBMs. In NCE, as in this work, a discriminative training criterion is\nemployed to ﬁt a generative model. However, rather than ﬁtting a separate discriminative model, the\ngenerative model itself is used to discriminate generated data from samples a ﬁxed noise distribution.\nBecause NCE uses a ﬁxed noise distribution, learning slows dramatically after the model has learned\neven an approximately correct distribution over a small subset of the observed variables.\nFinally, some techniques do not involve deﬁning a probability distribution explicitly, but rather train\na generative machine to draw samples from the desired distribution. This approach has the advantage\nthat such machines can be designed to be trained by back-propagation. Prominent recent work in this\narea includes the generative stochastic network (GSN) framework [5], which extends generalized\ndenoising auto-encoders [4]: both can be seen as deﬁning a parameterized Markov chain, i.e., one\nlearns the parameters of a machine that performs one step of a generative Markov chain. Compared\nto GSNs, the adversarial nets framework does not require a Markov chain for sampling. Because\nadversarial nets do not require feedback loops during generation, they are better able to leverage\npiecewise linear units [19, 9, 10], which improve the performance of backpropagation but have\nproblems with unbounded activation when used ina feedback loop. More recent examples of training\na generative machine by back-propagating into it include recent work on auto-encoding variational\nBayes [20] and stochastic backpropagation [24].\n3\nAdversarial nets\nThe adversarial modeling framework is most straightforward to apply when the models are both\nmultilayer perceptrons. To learn the generator’s distribution pg over data x, we deﬁne a prior on\ninput noise variables pz(z), then represent a mapping to data space as G(z; θg), where G is a\ndifferentiable function represented by a multilayer perceptron with parameters θg. We also deﬁne a\nsecond multilayer perceptron D(x; θd) that outputs a single scalar. D(x) represents the probability\nthat x came from the data rather than pg. We train D to maximize the probability of assigning the\ncorrect label to both training examples and samples from G. We simultaneously train G to minimize\nlog(1 −D(G(z))):\n2\n",
    "In other words, D and G play the following two-player minimax game with value function V (G, D):\nmin\nG max\nD V (D, G) = Ex∼pdata(x)[log D(x)] + Ez∼pz(z)[log(1 −D(G(z)))].\n(1)\nIn the next section, we present a theoretical analysis of adversarial nets, essentially showing that\nthe training criterion allows one to recover the data generating distribution as G and D are given\nenough capacity, i.e., in the non-parametric limit. See Figure 1 for a less formal, more pedagogical\nexplanation of the approach. In practice, we must implement the game using an iterative, numerical\napproach. Optimizing D to completion in the inner loop of training is computationally prohibitive,\nand on ﬁnite datasets would result in overﬁtting. Instead, we alternate between k steps of optimizing\nD and one step of optimizing G. This results in D being maintained near its optimal solution, so\nlong as G changes slowly enough. This strategy is analogous to the way that SML/PCD [31, 29]\ntraining maintains samples from a Markov chain from one learning step to the next in order to avoid\nburning in a Markov chain as part of the inner loop of learning. The procedure is formally presented\nin Algorithm 1.\nIn practice, equation 1 may not provide sufﬁcient gradient for G to learn well. Early in learning,\nwhen G is poor, D can reject samples with high conﬁdence because they are clearly different from\nthe training data. In this case, log(1 −D(G(z))) saturates. Rather than training G to minimize\nlog(1 −D(G(z))) we can train G to maximize log D(G(z)). This objective function results in the\nsame ﬁxed point of the dynamics of G and D but provides much stronger gradients early in learning.\nx\nz\n...\n(a)\n(b)\n(c)\n(d)\nFigure 1: Generative adversarial nets are trained by simultaneously updating the discriminative distribution\n(D, blue, dashed line) so that it discriminates between samples from the data generating distribution (black,\ndotted line) px from those of the generative distribution pg (G) (green, solid line). The lower horizontal line is\nthe domain from which z is sampled, in this case uniformly. The horizontal line above is part of the domain\nof x. The upward arrows show how the mapping x = G(z) imposes the non-uniform distribution pg on\ntransformed samples. G contracts in regions of high density and expands in regions of low density of pg. (a)\nConsider an adversarial pair near convergence: pg is similar to pdata and D is a partially accurate classiﬁer.\n(b) In the inner loop of the algorithm D is trained to discriminate samples from data, converging to D∗(x) =\npdata(x)\npdata(x)+pg(x). (c) After an update to G, gradient of D has guided G(z) to ﬂow to regions that are more likely\nto be classiﬁed as data. (d) After several steps of training, if G and D have enough capacity, they will reach a\npoint at which both cannot improve because pg = pdata. The discriminator is unable to differentiate between\nthe two distributions, i.e. D(x) = 1\n2.\n4\nTheoretical Results\nThe generator G implicitly deﬁnes a probability distribution pg as the distribution of the samples\nG(z) obtained when z ∼pz. Therefore, we would like Algorithm 1 to converge to a good estimator\nof pdata, if given enough capacity and training time. The results of this section are done in a non-\nparametric setting, e.g. we represent a model with inﬁnite capacity by studying convergence in the\nspace of probability density functions.\nWe will show in section 4.1 that this minimax game has a global optimum for pg = pdata. We will\nthen show in section 4.2 that Algorithm 1 optimizes Eq 1, thus obtaining the desired result.\n3\n",
    "Algorithm 1 Minibatch stochastic gradient descent training of generative adversarial nets. The number of\nsteps to apply to the discriminator, k, is a hyperparameter. We used k = 1, the least expensive option, in our\nexperiments.\nfor number of training iterations do\nfor k steps do\n• Sample minibatch of m noise samples {z(1), . . . , z(m)} from noise prior pg(z).\n• Sample minibatch of m examples {x(1), . . . , x(m)} from data generating distribution\npdata(x).\n• Update the discriminator by ascending its stochastic gradient:\n∇θd\n1\nm\nm\nX\ni=1\nh\nlog D\n\u0010\nx(i)\u0011\n+ log\n\u0010\n1 −D\n\u0010\nG\n\u0010\nz(i)\u0011\u0011\u0011i\n.\nend for\n• Sample minibatch of m noise samples {z(1), . . . , z(m)} from noise prior pg(z).\n• Update the generator by descending its stochastic gradient:\n∇θg\n1\nm\nm\nX\ni=1\nlog\n\u0010\n1 −D\n\u0010\nG\n\u0010\nz(i)\u0011\u0011\u0011\n.\nend for\nThe gradient-based updates can use any standard gradient-based learning rule. We used momen-\ntum in our experiments.\n4.1\nGlobal Optimality of pg = pdata\nWe ﬁrst consider the optimal discriminator D for any given generator G.\nProposition 1. For G ﬁxed, the optimal discriminator D is\nD∗\nG(x) =\npdata(x)\npdata(x) + pg(x)\n(2)\nProof. The training criterion for the discriminator D, given any generator G, is to maximize the\nquantity V (G, D)\nV (G, D) =\nZ\nx\npdata(x) log(D(x))dx +\nZ\nz\npz(z) log(1 −D(g(z)))dz\n=\nZ\nx\npdata(x) log(D(x)) + pg(x) log(1 −D(x))dx\n(3)\nFor any (a, b) ∈R2 \\ {0, 0}, the function y →a log(y) + b log(1 −y) achieves its maximum in\n[0, 1] at\na\na+b. The discriminator does not need to be deﬁned outside of Supp(pdata) ∪Supp(pg),\nconcluding the proof.\nNote that the training objective for D can be interpreted as maximizing the log-likelihood for es-\ntimating the conditional probability P(Y = y|x), where Y indicates whether x comes from pdata\n(with y = 1) or from pg (with y = 0). The minimax game in Eq. 1 can now be reformulated as:\nC(G) = max\nD V (G, D)\n=Ex∼pdata[log D∗\nG(x)] + Ez∼pz[log(1 −D∗\nG(G(z)))]\n(4)\n=Ex∼pdata[log D∗\nG(x)] + Ex∼pg[log(1 −D∗\nG(x))]\n=Ex∼pdata\n\u0014\nlog\npdata(x)\nPdata(x) + pg(x)\n\u0015\n+ Ex∼pg\n\u0014\nlog\npg(x)\npdata(x) + pg(x)\n\u0015\n4\n",
    "Theorem 1. The global minimum of the virtual training criterion C(G) is achieved if and only if\npg = pdata. At that point, C(G) achieves the value −log 4.\nProof. For pg = pdata, D∗\nG(x) = 1\n2, (consider Eq. 2). Hence, by inspecting Eq. 4 at D∗\nG(x) = 1\n2, we\nﬁnd C(G) = log 1\n2 + log 1\n2 = −log 4. To see that this is the best possible value of C(G), reached\nonly for pg = pdata, observe that\nEx∼pdata [−log 2] + Ex∼pg [−log 2] = −log 4\nand that by subtracting this expression from C(G) = V (D∗\nG, G), we obtain:\nC(G) = −log(4) + KL\n\u0012\npdata\n\r\r\r\r\npdata + pg\n2\n\u0013\n+ KL\n\u0012\npg\n\r\r\r\r\npdata + pg\n2\n\u0013\n(5)\nwhere KL is the Kullback–Leibler divergence. We recognize in the previous expression the Jensen–\nShannon divergence between the model’s distribution and the data generating process:\nC(G) = −log(4) + 2 · JSD (pdata ∥pg )\n(6)\nSince the Jensen–Shannon divergence between two distributions is always non-negative and zero\nonly when they are equal, we have shown that C∗= −log(4) is the global minimum of C(G) and\nthat the only solution is pg = pdata, i.e., the generative model perfectly replicating the data generating\nprocess.\n4.2\nConvergence of Algorithm 1\nProposition 2. If G and D have enough capacity, and at each step of Algorithm 1, the discriminator\nis allowed to reach its optimum given G, and pg is updated so as to improve the criterion\nEx∼pdata[log D∗\nG(x)] + Ex∼pg[log(1 −D∗\nG(x))]\nthen pg converges to pdata\nProof. Consider V (G, D) = U(pg, D) as a function of pg as done in the above criterion. Note\nthat U(pg, D) is convex in pg. The subderivatives of a supremum of convex functions include the\nderivative of the function at the point where the maximum is attained. In other words, if f(x) =\nsupα∈A fα(x) and fα(x) is convex in x for every α, then ∂fβ(x) ∈∂f if β = arg supα∈A fα(x).\nThis is equivalent to computing a gradient descent update for pg at the optimal D given the cor-\nresponding G. supD U(pg, D) is convex in pg with a unique global optima as proven in Thm 1,\ntherefore with sufﬁciently small updates of pg, pg converges to px, concluding the proof.\nIn practice, adversarial nets represent a limited family of pg distributions via the function G(z; θg),\nand we optimize θg rather than pg itself. Using a multilayer perceptron to deﬁne G introduces\nmultiple critical points in parameter space. However, the excellent performance of multilayer per-\nceptrons in practice suggests that they are a reasonable model to use despite their lack of theoretical\nguarantees.\n5\nExperiments\nWe trained adversarial nets an a range of datasets including MNIST[23], the Toronto Face Database\n(TFD) [28], and CIFAR-10 [21]. The generator nets used a mixture of rectiﬁer linear activations [19,\n9] and sigmoid activations, while the discriminator net used maxout [10] activations. Dropout [17]\nwas applied in training the discriminator net. While our theoretical framework permits the use of\ndropout and other noise at intermediate layers of the generator, we used noise as the input to only\nthe bottommost layer of the generator network.\nWe estimate probability of the test set data under pg by ﬁtting a Gaussian Parzen window to the\nsamples generated with G and reporting the log-likelihood under this distribution. The σ parameter\n5\n",
    "Model\nMNIST\nTFD\nDBN [3]\n138 ± 2\n1909 ± 66\nStacked CAE [3]\n121 ± 1.6\n2110 ± 50\nDeep GSN [6]\n214 ± 1.1\n1890 ± 29\nAdversarial nets\n225 ± 2\n2057 ± 26\nTable 1: Parzen window-based log-likelihood estimates. The reported numbers on MNIST are the mean log-\nlikelihood of samples on test set, with the standard error of the mean computed across examples. On TFD, we\ncomputed the standard error across folds of the dataset, with a different σ chosen using the validation set of\neach fold. On TFD, σ was cross validated on each fold and mean log-likelihood on each fold were computed.\nFor MNIST we compare against other models of the real-valued (rather than binary) version of dataset.\nof the Gaussians was obtained by cross validation on the validation set. This procedure was intro-\nduced in Breuleux et al. [8] and used for various generative models for which the exact likelihood\nis not tractable [25, 3, 5]. Results are reported in Table 1. This method of estimating the likelihood\nhas somewhat high variance and does not perform well in high dimensional spaces but it is the best\nmethod available to our knowledge. Advances in generative models that can sample but not estimate\nlikelihood directly motivate further research into how to evaluate such models.\nIn Figures 2 and 3 we show samples drawn from the generator net after training. While we make no\nclaim that these samples are better than samples generated by existing methods, we believe that these\nsamples are at least competitive with the better generative models in the literature and highlight the\npotential of the adversarial framework.\na)\nb)\nc)\nd)\nFigure 2: Visualization of samples from the model. Rightmost column shows the nearest training example of\nthe neighboring sample, in order to demonstrate that the model has not memorized the training set. Samples\nare fair random draws, not cherry-picked. Unlike most other visualizations of deep generative models, these\nimages show actual samples from the model distributions, not conditional means given samples of hidden units.\nMoreover, these samples are uncorrelated because the sampling process does not depend on Markov chain\nmixing. a) MNIST b) TFD c) CIFAR-10 (fully connected model) d) CIFAR-10 (convolutional discriminator\nand “deconvolutional” generator)\n6\n",
    "Figure 3: Digits obtained by linearly interpolating between coordinates in z space of the full model.\nDeep directed\ngraphical models\nDeep undirected\ngraphical models\nGenerative\nautoencoders\nAdversarial models\nTraining\nInference needed\nduring training.\nInference needed\nduring training.\nMCMC needed to\napproximate\npartition function\ngradient.\nEnforced tradeoff\nbetween mixing\nand power of\nreconstruction\ngeneration\nSynchronizing the\ndiscriminator with\nthe generator.\nHelvetica.\nInference\nLearned\napproximate\ninference\nVariational\ninference\nMCMC-based\ninference\nLearned\napproximate\ninference\nSampling\nNo difﬁculties\nRequires Markov\nchain\nRequires Markov\nchain\nNo difﬁculties\nEvaluating p(x)\nIntractable, may be\napproximated with\nAIS\nIntractable, may be\napproximated with\nAIS\nNot explicitly\nrepresented, may be\napproximated with\nParzen density\nestimation\nNot explicitly\nrepresented, may be\napproximated with\nParzen density\nestimation\nModel design\nNearly all models\nincur extreme\ndifﬁculty\nCareful design\nneeded to ensure\nmultiple properties\nAny differentiable\nfunction is\ntheoretically\npermitted\nAny differentiable\nfunction is\ntheoretically\npermitted\nTable 2: Challenges in generative modeling: a summary of the difﬁculties encountered by different approaches\nto deep generative modeling for each of the major operations involving a model.\n6\nAdvantages and disadvantages\nThis new framework comes with advantages and disadvantages relative to previous modeling frame-\nworks. The disadvantages are primarily that there is no explicit representation of pg(x), and that D\nmust be synchronized well with G during training (in particular, G must not be trained too much\nwithout updating D, in order to avoid “the Helvetica scenario” in which G collapses too many values\nof z to the same value of x to have enough diversity to model pdata), much as the negative chains of a\nBoltzmann machine must be kept up to date between learning steps. The advantages are that Markov\nchains are never needed, only backprop is used to obtain gradients, no inference is needed during\nlearning, and a wide variety of functions can be incorporated into the model. Table 2 summarizes\nthe comparison of generative adversarial nets with other generative modeling approaches.\nThe aforementioned advantages are primarily computational. Adversarial models may also gain\nsome statistical advantage from the generator network not being updated directly with data exam-\nples, but only with gradients ﬂowing through the discriminator. This means that components of the\ninput are not copied directly into the generator’s parameters. Another advantage of adversarial net-\nworks is that they can represent very sharp, even degenerate distributions, while methods based on\nMarkov chains require that the distribution be somewhat blurry in order for the chains to be able to\nmix between modes.\n7\nConclusions and future work\nThis framework admits many straightforward extensions:\n1. A conditional generative model p(x | c) can be obtained by adding c as input to both G and D.\n2. Learned approximate inference can be performed by training an auxiliary network to predict z\ngiven x. This is similar to the inference net trained by the wake-sleep algorithm [15] but with\nthe advantage that the inference net may be trained for a ﬁxed generator net after the generator\nnet has ﬁnished training.\n7\n",
    "3. One can approximately model all conditionals p(xS | x̸S) where S is a subset of the indices\nof x by training a family of conditional models that share parameters. Essentially, one can use\nadversarial nets to implement a stochastic extension of the deterministic MP-DBM [11].\n4. Semi-supervised learning: features from the discriminator or inference net could improve perfor-\nmance of classiﬁers when limited labeled data is available.\n5. Efﬁciency improvements: training could be accelerated greatly by divising better methods for\ncoordinating G and D or determining better distributions to sample z from during training.\nThis paper has demonstrated the viability of the adversarial modeling framework, suggesting that\nthese research directions could prove useful.\nAcknowledgments\nWe would like to acknowledge Patrice Marcotte, Olivier Delalleau, Kyunghyun Cho, Guillaume\nAlain and Jason Yosinski for helpful discussions. Yann Dauphin shared his Parzen window eval-\nuation code with us. We would like to thank the developers of Pylearn2 [12] and Theano [7, 1],\nparticularly Fr´ed´eric Bastien who rushed a Theano feature speciﬁcally to beneﬁt this project. Ar-\nnaud Bergeron provided much-needed support with LATEX typesetting. We would also like to thank\nCIFAR, and Canada Research Chairs for funding, and Compute Canada, and Calcul Qu´ebec for\nproviding computational resources. Ian Goodfellow is supported by the 2013 Google Fellowship in\nDeep Learning. Finally, we would like to thank Les Trois Brasseurs for stimulating our creativity.\nReferences\n[1] Bastien, F., Lamblin, P., Pascanu, R., Bergstra, J., Goodfellow, I. J., Bergeron, A., Bouchard, N., and\nBengio, Y. (2012). Theano: new features and speed improvements. Deep Learning and Unsupervised\nFeature Learning NIPS 2012 Workshop.\n[2] Bengio, Y. (2009). Learning deep architectures for AI. Now Publishers.\n[3] Bengio, Y., Mesnil, G., Dauphin, Y., and Rifai, S. (2013a). Better mixing via deep representations. In\nICML’13.\n[4] Bengio, Y., Yao, L., Alain, G., and Vincent, P. (2013b). Generalized denoising auto-encoders as generative\nmodels. In NIPS26. Nips Foundation.\n[5] Bengio, Y., Thibodeau-Laufer, E., and Yosinski, J. (2014a). Deep generative stochastic networks trainable\nby backprop. In ICML’14.\n[6] Bengio, Y., Thibodeau-Laufer, E., Alain, G., and Yosinski, J. (2014b). Deep generative stochastic net-\nworks trainable by backprop. In Proceedings of the 30th International Conference on Machine Learning\n(ICML’14).\n[7] Bergstra, J., Breuleux, O., Bastien, F., Lamblin, P., Pascanu, R., Desjardins, G., Turian, J., Warde-Farley,\nD., and Bengio, Y. (2010). Theano: a CPU and GPU math expression compiler. In Proceedings of the\nPython for Scientiﬁc Computing Conference (SciPy). Oral Presentation.\n[8] Breuleux, O., Bengio, Y., and Vincent, P. (2011). Quickly generating representative samples from an\nRBM-derived process. Neural Computation, 23(8), 2053–2073.\n[9] Glorot, X., Bordes, A., and Bengio, Y. (2011). Deep sparse rectiﬁer neural networks. In AISTATS’2011.\n[10] Goodfellow, I. J., Warde-Farley, D., Mirza, M., Courville, A., and Bengio, Y. (2013a). Maxout networks.\nIn ICML’2013.\n[11] Goodfellow, I. J., Mirza, M., Courville, A., and Bengio, Y. (2013b). Multi-prediction deep Boltzmann\nmachines. In NIPS’2013.\n[12] Goodfellow, I. J., Warde-Farley, D., Lamblin, P., Dumoulin, V., Mirza, M., Pascanu, R., Bergstra,\nJ., Bastien, F., and Bengio, Y. (2013c). Pylearn2: a machine learning research library. arXiv preprint\narXiv:1308.4214.\n[13] Gutmann, M. and Hyvarinen, A. (2010). Noise-contrastive estimation: A new estimation principle for\nunnormalized statistical models. In AISTATS’2010.\n[14] Hinton, G., Deng, L., Dahl, G. E., Mohamed, A., Jaitly, N., Senior, A., Vanhoucke, V., Nguyen, P.,\nSainath, T., and Kingsbury, B. (2012a). Deep neural networks for acoustic modeling in speech recognition.\nIEEE Signal Processing Magazine, 29(6), 82–97.\n[15] Hinton, G. E., Dayan, P., Frey, B. J., and Neal, R. M. (1995). The wake-sleep algorithm for unsupervised\nneural networks. Science, 268, 1558–1161.\n8\n",
    "[16] Hinton, G. E., Osindero, S., and Teh, Y. (2006). A fast learning algorithm for deep belief nets. Neural\nComputation, 18, 1527–1554.\n[17] Hinton, G. E., Srivastava, N., Krizhevsky, A., Sutskever, I., and Salakhutdinov, R. (2012b). Improving\nneural networks by preventing co-adaptation of feature detectors. Technical report, arXiv:1207.0580.\n[18] Hyv¨arinen, A. (2005). Estimation of non-normalized statistical models using score matching. J. Machine\nLearning Res., 6.\n[19] Jarrett, K., Kavukcuoglu, K., Ranzato, M., and LeCun, Y. (2009). What is the best multi-stage architecture\nfor object recognition? In Proc. International Conference on Computer Vision (ICCV’09), pages 2146–2153.\nIEEE.\n[20] Kingma, D. P. and Welling, M. (2014). Auto-encoding variational bayes. In Proceedings of the Interna-\ntional Conference on Learning Representations (ICLR).\n[21] Krizhevsky, A. and Hinton, G. (2009). Learning multiple layers of features from tiny images. Technical\nreport, University of Toronto.\n[22] Krizhevsky, A., Sutskever, I., and Hinton, G. (2012). ImageNet classiﬁcation with deep convolutional\nneural networks. In NIPS’2012.\n[23] LeCun, Y., Bottou, L., Bengio, Y., and Haffner, P. (1998). Gradient-based learning applied to document\nrecognition. Proceedings of the IEEE, 86(11), 2278–2324.\n[24] Rezende, D. J., Mohamed, S., and Wierstra, D. (2014). Stochastic backpropagation and approximate\ninference in deep generative models. Technical report, arXiv:1401.4082.\n[25] Rifai, S., Bengio, Y., Dauphin, Y., and Vincent, P. (2012). A generative process for sampling contractive\nauto-encoders. In ICML’12.\n[26] Salakhutdinov, R. and Hinton, G. E. (2009). Deep Boltzmann machines. In AISTATS’2009, pages 448–\n455.\n[27] Smolensky, P. (1986). Information processing in dynamical systems: Foundations of harmony theory. In\nD. E. Rumelhart and J. L. McClelland, editors, Parallel Distributed Processing, volume 1, chapter 6, pages\n194–281. MIT Press, Cambridge.\n[28] Susskind, J., Anderson, A., and Hinton, G. E. (2010). The Toronto face dataset. Technical Report UTML\nTR 2010-001, U. Toronto.\n[29] Tieleman, T. (2008). Training restricted Boltzmann machines using approximations to the likelihood\ngradient. In W. W. Cohen, A. McCallum, and S. T. Roweis, editors, ICML 2008, pages 1064–1071. ACM.\n[30] Vincent, P., Larochelle, H., Bengio, Y., and Manzagol, P.-A. (2008). Extracting and composing robust\nfeatures with denoising autoencoders. In ICML 2008.\n[31] Younes, L. (1999).\nOn the convergence of Markovian stochastic algorithms with rapidly decreasing\nergodicity rates. Stochastics and Stochastic Reports, 65(3), 177–228.\n9\n"
  ],
  "full_text": "Generative Adversarial Nets\nIan J. Goodfellow, Jean Pouget-Abadie∗, Mehdi Mirza, Bing Xu, David Warde-Farley,\nSherjil Ozair†, Aaron Courville, Yoshua Bengio‡\nD´epartement d’informatique et de recherche op´erationnelle\nUniversit´e de Montr´eal\nMontr´eal, QC H3C 3J7\nAbstract\nWe propose a new framework for estimating generative models via an adversar-\nial process, in which we simultaneously train two models: a generative model G\nthat captures the data distribution, and a discriminative model D that estimates\nthe probability that a sample came from the training data rather than G. The train-\ning procedure for G is to maximize the probability of D making a mistake. This\nframework corresponds to a minimax two-player game. In the space of arbitrary\nfunctions G and D, a unique solution exists, with G recovering the training data\ndistribution and D equal to 1\n2 everywhere. In the case where G and D are deﬁned\nby multilayer perceptrons, the entire system can be trained with backpropagation.\nThere is no need for any Markov chains or unrolled approximate inference net-\nworks during either training or generation of samples. Experiments demonstrate\nthe potential of the framework through qualitative and quantitative evaluation of\nthe generated samples.\n1\nIntroduction\nThe promise of deep learning is to discover rich, hierarchical models [2] that represent probability\ndistributions over the kinds of data encountered in artiﬁcial intelligence applications, such as natural\nimages, audio waveforms containing speech, and symbols in natural language corpora. So far, the\nmost striking successes in deep learning have involved discriminative models, usually those that\nmap a high-dimensional, rich sensory input to a class label [14, 22]. These striking successes have\nprimarily been based on the backpropagation and dropout algorithms, using piecewise linear units\n[19, 9, 10] which have a particularly well-behaved gradient . Deep generative models have had less\nof an impact, due to the difﬁculty of approximating many intractable probabilistic computations that\narise in maximum likelihood estimation and related strategies, and due to difﬁculty of leveraging\nthe beneﬁts of piecewise linear units in the generative context. We propose a new generative model\nestimation procedure that sidesteps these difﬁculties. 1\nIn the proposed adversarial nets framework, the generative model is pitted against an adversary: a\ndiscriminative model that learns to determine whether a sample is from the model distribution or the\ndata distribution. The generative model can be thought of as analogous to a team of counterfeiters,\ntrying to produce fake currency and use it without detection, while the discriminative model is\nanalogous to the police, trying to detect the counterfeit currency. Competition in this game drives\nboth teams to improve their methods until the counterfeits are indistiguishable from the genuine\narticles.\n∗Jean Pouget-Abadie is visiting Universit´e de Montr´eal from Ecole Polytechnique.\n†Sherjil Ozair is visiting Universit´e de Montr´eal from Indian Institute of Technology Delhi\n‡Yoshua Bengio is a CIFAR Senior Fellow.\n1All code and hyperparameters available at http://www.github.com/goodfeli/adversarial\n1\narXiv:1406.2661v1  [stat.ML]  10 Jun 2014\n\n\nThis framework can yield speciﬁc training algorithms for many kinds of model and optimization\nalgorithm. In this article, we explore the special case when the generative model generates samples\nby passing random noise through a multilayer perceptron, and the discriminative model is also a\nmultilayer perceptron. We refer to this special case as adversarial nets. In this case, we can train\nboth models using only the highly successful backpropagation and dropout algorithms [17] and\nsample from the generative model using only forward propagation. No approximate inference or\nMarkov chains are necessary.\n2\nRelated work\nAn alternative to directed graphical models with latent variables are undirected graphical models\nwith latent variables, such as restricted Boltzmann machines (RBMs) [27, 16], deep Boltzmann\nmachines (DBMs) [26] and their numerous variants.\nThe interactions within such models are\nrepresented as the product of unnormalized potential functions, normalized by a global summa-\ntion/integration over all states of the random variables. This quantity (the partition function) and\nits gradient are intractable for all but the most trivial instances, although they can be estimated by\nMarkov chain Monte Carlo (MCMC) methods. Mixing poses a signiﬁcant problem for learning\nalgorithms that rely on MCMC [3, 5].\nDeep belief networks (DBNs) [16] are hybrid models containing a single undirected layer and sev-\neral directed layers. While a fast approximate layer-wise training criterion exists, DBNs incur the\ncomputational difﬁculties associated with both undirected and directed models.\nAlternative criteria that do not approximate or bound the log-likelihood have also been proposed,\nsuch as score matching [18] and noise-contrastive estimation (NCE) [13]. Both of these require the\nlearned probability density to be analytically speciﬁed up to a normalization constant. Note that\nin many interesting generative models with several layers of latent variables (such as DBNs and\nDBMs), it is not even possible to derive a tractable unnormalized probability density. Some models\nsuch as denoising auto-encoders [30] and contractive autoencoders have learning rules very similar\nto score matching applied to RBMs. In NCE, as in this work, a discriminative training criterion is\nemployed to ﬁt a generative model. However, rather than ﬁtting a separate discriminative model, the\ngenerative model itself is used to discriminate generated data from samples a ﬁxed noise distribution.\nBecause NCE uses a ﬁxed noise distribution, learning slows dramatically after the model has learned\neven an approximately correct distribution over a small subset of the observed variables.\nFinally, some techniques do not involve deﬁning a probability distribution explicitly, but rather train\na generative machine to draw samples from the desired distribution. This approach has the advantage\nthat such machines can be designed to be trained by back-propagation. Prominent recent work in this\narea includes the generative stochastic network (GSN) framework [5], which extends generalized\ndenoising auto-encoders [4]: both can be seen as deﬁning a parameterized Markov chain, i.e., one\nlearns the parameters of a machine that performs one step of a generative Markov chain. Compared\nto GSNs, the adversarial nets framework does not require a Markov chain for sampling. Because\nadversarial nets do not require feedback loops during generation, they are better able to leverage\npiecewise linear units [19, 9, 10], which improve the performance of backpropagation but have\nproblems with unbounded activation when used ina feedback loop. More recent examples of training\na generative machine by back-propagating into it include recent work on auto-encoding variational\nBayes [20] and stochastic backpropagation [24].\n3\nAdversarial nets\nThe adversarial modeling framework is most straightforward to apply when the models are both\nmultilayer perceptrons. To learn the generator’s distribution pg over data x, we deﬁne a prior on\ninput noise variables pz(z), then represent a mapping to data space as G(z; θg), where G is a\ndifferentiable function represented by a multilayer perceptron with parameters θg. We also deﬁne a\nsecond multilayer perceptron D(x; θd) that outputs a single scalar. D(x) represents the probability\nthat x came from the data rather than pg. We train D to maximize the probability of assigning the\ncorrect label to both training examples and samples from G. We simultaneously train G to minimize\nlog(1 −D(G(z))):\n2\n\n\nIn other words, D and G play the following two-player minimax game with value function V (G, D):\nmin\nG max\nD V (D, G) = Ex∼pdata(x)[log D(x)] + Ez∼pz(z)[log(1 −D(G(z)))].\n(1)\nIn the next section, we present a theoretical analysis of adversarial nets, essentially showing that\nthe training criterion allows one to recover the data generating distribution as G and D are given\nenough capacity, i.e., in the non-parametric limit. See Figure 1 for a less formal, more pedagogical\nexplanation of the approach. In practice, we must implement the game using an iterative, numerical\napproach. Optimizing D to completion in the inner loop of training is computationally prohibitive,\nand on ﬁnite datasets would result in overﬁtting. Instead, we alternate between k steps of optimizing\nD and one step of optimizing G. This results in D being maintained near its optimal solution, so\nlong as G changes slowly enough. This strategy is analogous to the way that SML/PCD [31, 29]\ntraining maintains samples from a Markov chain from one learning step to the next in order to avoid\nburning in a Markov chain as part of the inner loop of learning. The procedure is formally presented\nin Algorithm 1.\nIn practice, equation 1 may not provide sufﬁcient gradient for G to learn well. Early in learning,\nwhen G is poor, D can reject samples with high conﬁdence because they are clearly different from\nthe training data. In this case, log(1 −D(G(z))) saturates. Rather than training G to minimize\nlog(1 −D(G(z))) we can train G to maximize log D(G(z)). This objective function results in the\nsame ﬁxed point of the dynamics of G and D but provides much stronger gradients early in learning.\nx\nz\n...\n(a)\n(b)\n(c)\n(d)\nFigure 1: Generative adversarial nets are trained by simultaneously updating the discriminative distribution\n(D, blue, dashed line) so that it discriminates between samples from the data generating distribution (black,\ndotted line) px from those of the generative distribution pg (G) (green, solid line). The lower horizontal line is\nthe domain from which z is sampled, in this case uniformly. The horizontal line above is part of the domain\nof x. The upward arrows show how the mapping x = G(z) imposes the non-uniform distribution pg on\ntransformed samples. G contracts in regions of high density and expands in regions of low density of pg. (a)\nConsider an adversarial pair near convergence: pg is similar to pdata and D is a partially accurate classiﬁer.\n(b) In the inner loop of the algorithm D is trained to discriminate samples from data, converging to D∗(x) =\npdata(x)\npdata(x)+pg(x). (c) After an update to G, gradient of D has guided G(z) to ﬂow to regions that are more likely\nto be classiﬁed as data. (d) After several steps of training, if G and D have enough capacity, they will reach a\npoint at which both cannot improve because pg = pdata. The discriminator is unable to differentiate between\nthe two distributions, i.e. D(x) = 1\n2.\n4\nTheoretical Results\nThe generator G implicitly deﬁnes a probability distribution pg as the distribution of the samples\nG(z) obtained when z ∼pz. Therefore, we would like Algorithm 1 to converge to a good estimator\nof pdata, if given enough capacity and training time. The results of this section are done in a non-\nparametric setting, e.g. we represent a model with inﬁnite capacity by studying convergence in the\nspace of probability density functions.\nWe will show in section 4.1 that this minimax game has a global optimum for pg = pdata. We will\nthen show in section 4.2 that Algorithm 1 optimizes Eq 1, thus obtaining the desired result.\n3\n\n\nAlgorithm 1 Minibatch stochastic gradient descent training of generative adversarial nets. The number of\nsteps to apply to the discriminator, k, is a hyperparameter. We used k = 1, the least expensive option, in our\nexperiments.\nfor number of training iterations do\nfor k steps do\n• Sample minibatch of m noise samples {z(1), . . . , z(m)} from noise prior pg(z).\n• Sample minibatch of m examples {x(1), . . . , x(m)} from data generating distribution\npdata(x).\n• Update the discriminator by ascending its stochastic gradient:\n∇θd\n1\nm\nm\nX\ni=1\nh\nlog D\n\u0010\nx(i)\u0011\n+ log\n\u0010\n1 −D\n\u0010\nG\n\u0010\nz(i)\u0011\u0011\u0011i\n.\nend for\n• Sample minibatch of m noise samples {z(1), . . . , z(m)} from noise prior pg(z).\n• Update the generator by descending its stochastic gradient:\n∇θg\n1\nm\nm\nX\ni=1\nlog\n\u0010\n1 −D\n\u0010\nG\n\u0010\nz(i)\u0011\u0011\u0011\n.\nend for\nThe gradient-based updates can use any standard gradient-based learning rule. We used momen-\ntum in our experiments.\n4.1\nGlobal Optimality of pg = pdata\nWe ﬁrst consider the optimal discriminator D for any given generator G.\nProposition 1. For G ﬁxed, the optimal discriminator D is\nD∗\nG(x) =\npdata(x)\npdata(x) + pg(x)\n(2)\nProof. The training criterion for the discriminator D, given any generator G, is to maximize the\nquantity V (G, D)\nV (G, D) =\nZ\nx\npdata(x) log(D(x))dx +\nZ\nz\npz(z) log(1 −D(g(z)))dz\n=\nZ\nx\npdata(x) log(D(x)) + pg(x) log(1 −D(x))dx\n(3)\nFor any (a, b) ∈R2 \\ {0, 0}, the function y →a log(y) + b log(1 −y) achieves its maximum in\n[0, 1] at\na\na+b. The discriminator does not need to be deﬁned outside of Supp(pdata) ∪Supp(pg),\nconcluding the proof.\nNote that the training objective for D can be interpreted as maximizing the log-likelihood for es-\ntimating the conditional probability P(Y = y|x), where Y indicates whether x comes from pdata\n(with y = 1) or from pg (with y = 0). The minimax game in Eq. 1 can now be reformulated as:\nC(G) = max\nD V (G, D)\n=Ex∼pdata[log D∗\nG(x)] + Ez∼pz[log(1 −D∗\nG(G(z)))]\n(4)\n=Ex∼pdata[log D∗\nG(x)] + Ex∼pg[log(1 −D∗\nG(x))]\n=Ex∼pdata\n\u0014\nlog\npdata(x)\nPdata(x) + pg(x)\n\u0015\n+ Ex∼pg\n\u0014\nlog\npg(x)\npdata(x) + pg(x)\n\u0015\n4\n\n\nTheorem 1. The global minimum of the virtual training criterion C(G) is achieved if and only if\npg = pdata. At that point, C(G) achieves the value −log 4.\nProof. For pg = pdata, D∗\nG(x) = 1\n2, (consider Eq. 2). Hence, by inspecting Eq. 4 at D∗\nG(x) = 1\n2, we\nﬁnd C(G) = log 1\n2 + log 1\n2 = −log 4. To see that this is the best possible value of C(G), reached\nonly for pg = pdata, observe that\nEx∼pdata [−log 2] + Ex∼pg [−log 2] = −log 4\nand that by subtracting this expression from C(G) = V (D∗\nG, G), we obtain:\nC(G) = −log(4) + KL\n\u0012\npdata\n\r\r\r\r\npdata + pg\n2\n\u0013\n+ KL\n\u0012\npg\n\r\r\r\r\npdata + pg\n2\n\u0013\n(5)\nwhere KL is the Kullback–Leibler divergence. We recognize in the previous expression the Jensen–\nShannon divergence between the model’s distribution and the data generating process:\nC(G) = −log(4) + 2 · JSD (pdata ∥pg )\n(6)\nSince the Jensen–Shannon divergence between two distributions is always non-negative and zero\nonly when they are equal, we have shown that C∗= −log(4) is the global minimum of C(G) and\nthat the only solution is pg = pdata, i.e., the generative model perfectly replicating the data generating\nprocess.\n4.2\nConvergence of Algorithm 1\nProposition 2. If G and D have enough capacity, and at each step of Algorithm 1, the discriminator\nis allowed to reach its optimum given G, and pg is updated so as to improve the criterion\nEx∼pdata[log D∗\nG(x)] + Ex∼pg[log(1 −D∗\nG(x))]\nthen pg converges to pdata\nProof. Consider V (G, D) = U(pg, D) as a function of pg as done in the above criterion. Note\nthat U(pg, D) is convex in pg. The subderivatives of a supremum of convex functions include the\nderivative of the function at the point where the maximum is attained. In other words, if f(x) =\nsupα∈A fα(x) and fα(x) is convex in x for every α, then ∂fβ(x) ∈∂f if β = arg supα∈A fα(x).\nThis is equivalent to computing a gradient descent update for pg at the optimal D given the cor-\nresponding G. supD U(pg, D) is convex in pg with a unique global optima as proven in Thm 1,\ntherefore with sufﬁciently small updates of pg, pg converges to px, concluding the proof.\nIn practice, adversarial nets represent a limited family of pg distributions via the function G(z; θg),\nand we optimize θg rather than pg itself. Using a multilayer perceptron to deﬁne G introduces\nmultiple critical points in parameter space. However, the excellent performance of multilayer per-\nceptrons in practice suggests that they are a reasonable model to use despite their lack of theoretical\nguarantees.\n5\nExperiments\nWe trained adversarial nets an a range of datasets including MNIST[23], the Toronto Face Database\n(TFD) [28], and CIFAR-10 [21]. The generator nets used a mixture of rectiﬁer linear activations [19,\n9] and sigmoid activations, while the discriminator net used maxout [10] activations. Dropout [17]\nwas applied in training the discriminator net. While our theoretical framework permits the use of\ndropout and other noise at intermediate layers of the generator, we used noise as the input to only\nthe bottommost layer of the generator network.\nWe estimate probability of the test set data under pg by ﬁtting a Gaussian Parzen window to the\nsamples generated with G and reporting the log-likelihood under this distribution. The σ parameter\n5\n\n\nModel\nMNIST\nTFD\nDBN [3]\n138 ± 2\n1909 ± 66\nStacked CAE [3]\n121 ± 1.6\n2110 ± 50\nDeep GSN [6]\n214 ± 1.1\n1890 ± 29\nAdversarial nets\n225 ± 2\n2057 ± 26\nTable 1: Parzen window-based log-likelihood estimates. The reported numbers on MNIST are the mean log-\nlikelihood of samples on test set, with the standard error of the mean computed across examples. On TFD, we\ncomputed the standard error across folds of the dataset, with a different σ chosen using the validation set of\neach fold. On TFD, σ was cross validated on each fold and mean log-likelihood on each fold were computed.\nFor MNIST we compare against other models of the real-valued (rather than binary) version of dataset.\nof the Gaussians was obtained by cross validation on the validation set. This procedure was intro-\nduced in Breuleux et al. [8] and used for various generative models for which the exact likelihood\nis not tractable [25, 3, 5]. Results are reported in Table 1. This method of estimating the likelihood\nhas somewhat high variance and does not perform well in high dimensional spaces but it is the best\nmethod available to our knowledge. Advances in generative models that can sample but not estimate\nlikelihood directly motivate further research into how to evaluate such models.\nIn Figures 2 and 3 we show samples drawn from the generator net after training. While we make no\nclaim that these samples are better than samples generated by existing methods, we believe that these\nsamples are at least competitive with the better generative models in the literature and highlight the\npotential of the adversarial framework.\na)\nb)\nc)\nd)\nFigure 2: Visualization of samples from the model. Rightmost column shows the nearest training example of\nthe neighboring sample, in order to demonstrate that the model has not memorized the training set. Samples\nare fair random draws, not cherry-picked. Unlike most other visualizations of deep generative models, these\nimages show actual samples from the model distributions, not conditional means given samples of hidden units.\nMoreover, these samples are uncorrelated because the sampling process does not depend on Markov chain\nmixing. a) MNIST b) TFD c) CIFAR-10 (fully connected model) d) CIFAR-10 (convolutional discriminator\nand “deconvolutional” generator)\n6\n\n\nFigure 3: Digits obtained by linearly interpolating between coordinates in z space of the full model.\nDeep directed\ngraphical models\nDeep undirected\ngraphical models\nGenerative\nautoencoders\nAdversarial models\nTraining\nInference needed\nduring training.\nInference needed\nduring training.\nMCMC needed to\napproximate\npartition function\ngradient.\nEnforced tradeoff\nbetween mixing\nand power of\nreconstruction\ngeneration\nSynchronizing the\ndiscriminator with\nthe generator.\nHelvetica.\nInference\nLearned\napproximate\ninference\nVariational\ninference\nMCMC-based\ninference\nLearned\napproximate\ninference\nSampling\nNo difﬁculties\nRequires Markov\nchain\nRequires Markov\nchain\nNo difﬁculties\nEvaluating p(x)\nIntractable, may be\napproximated with\nAIS\nIntractable, may be\napproximated with\nAIS\nNot explicitly\nrepresented, may be\napproximated with\nParzen density\nestimation\nNot explicitly\nrepresented, may be\napproximated with\nParzen density\nestimation\nModel design\nNearly all models\nincur extreme\ndifﬁculty\nCareful design\nneeded to ensure\nmultiple properties\nAny differentiable\nfunction is\ntheoretically\npermitted\nAny differentiable\nfunction is\ntheoretically\npermitted\nTable 2: Challenges in generative modeling: a summary of the difﬁculties encountered by different approaches\nto deep generative modeling for each of the major operations involving a model.\n6\nAdvantages and disadvantages\nThis new framework comes with advantages and disadvantages relative to previous modeling frame-\nworks. The disadvantages are primarily that there is no explicit representation of pg(x), and that D\nmust be synchronized well with G during training (in particular, G must not be trained too much\nwithout updating D, in order to avoid “the Helvetica scenario” in which G collapses too many values\nof z to the same value of x to have enough diversity to model pdata), much as the negative chains of a\nBoltzmann machine must be kept up to date between learning steps. The advantages are that Markov\nchains are never needed, only backprop is used to obtain gradients, no inference is needed during\nlearning, and a wide variety of functions can be incorporated into the model. Table 2 summarizes\nthe comparison of generative adversarial nets with other generative modeling approaches.\nThe aforementioned advantages are primarily computational. Adversarial models may also gain\nsome statistical advantage from the generator network not being updated directly with data exam-\nples, but only with gradients ﬂowing through the discriminator. This means that components of the\ninput are not copied directly into the generator’s parameters. Another advantage of adversarial net-\nworks is that they can represent very sharp, even degenerate distributions, while methods based on\nMarkov chains require that the distribution be somewhat blurry in order for the chains to be able to\nmix between modes.\n7\nConclusions and future work\nThis framework admits many straightforward extensions:\n1. A conditional generative model p(x | c) can be obtained by adding c as input to both G and D.\n2. Learned approximate inference can be performed by training an auxiliary network to predict z\ngiven x. This is similar to the inference net trained by the wake-sleep algorithm [15] but with\nthe advantage that the inference net may be trained for a ﬁxed generator net after the generator\nnet has ﬁnished training.\n7\n\n\n3. One can approximately model all conditionals p(xS | x̸S) where S is a subset of the indices\nof x by training a family of conditional models that share parameters. Essentially, one can use\nadversarial nets to implement a stochastic extension of the deterministic MP-DBM [11].\n4. Semi-supervised learning: features from the discriminator or inference net could improve perfor-\nmance of classiﬁers when limited labeled data is available.\n5. Efﬁciency improvements: training could be accelerated greatly by divising better methods for\ncoordinating G and D or determining better distributions to sample z from during training.\nThis paper has demonstrated the viability of the adversarial modeling framework, suggesting that\nthese research directions could prove useful.\nAcknowledgments\nWe would like to acknowledge Patrice Marcotte, Olivier Delalleau, Kyunghyun Cho, Guillaume\nAlain and Jason Yosinski for helpful discussions. Yann Dauphin shared his Parzen window eval-\nuation code with us. We would like to thank the developers of Pylearn2 [12] and Theano [7, 1],\nparticularly Fr´ed´eric Bastien who rushed a Theano feature speciﬁcally to beneﬁt this project. Ar-\nnaud Bergeron provided much-needed support with LATEX typesetting. We would also like to thank\nCIFAR, and Canada Research Chairs for funding, and Compute Canada, and Calcul Qu´ebec for\nproviding computational resources. Ian Goodfellow is supported by the 2013 Google Fellowship in\nDeep Learning. Finally, we would like to thank Les Trois Brasseurs for stimulating our creativity.\nReferences\n[1] Bastien, F., Lamblin, P., Pascanu, R., Bergstra, J., Goodfellow, I. J., Bergeron, A., Bouchard, N., and\nBengio, Y. (2012). Theano: new features and speed improvements. Deep Learning and Unsupervised\nFeature Learning NIPS 2012 Workshop.\n[2] Bengio, Y. (2009). Learning deep architectures for AI. Now Publishers.\n[3] Bengio, Y., Mesnil, G., Dauphin, Y., and Rifai, S. (2013a). Better mixing via deep representations. In\nICML’13.\n[4] Bengio, Y., Yao, L., Alain, G., and Vincent, P. (2013b). Generalized denoising auto-encoders as generative\nmodels. In NIPS26. Nips Foundation.\n[5] Bengio, Y., Thibodeau-Laufer, E., and Yosinski, J. (2014a). Deep generative stochastic networks trainable\nby backprop. In ICML’14.\n[6] Bengio, Y., Thibodeau-Laufer, E., Alain, G., and Yosinski, J. (2014b). Deep generative stochastic net-\nworks trainable by backprop. In Proceedings of the 30th International Conference on Machine Learning\n(ICML’14).\n[7] Bergstra, J., Breuleux, O., Bastien, F., Lamblin, P., Pascanu, R., Desjardins, G., Turian, J., Warde-Farley,\nD., and Bengio, Y. (2010). Theano: a CPU and GPU math expression compiler. In Proceedings of the\nPython for Scientiﬁc Computing Conference (SciPy). Oral Presentation.\n[8] Breuleux, O., Bengio, Y., and Vincent, P. (2011). Quickly generating representative samples from an\nRBM-derived process. Neural Computation, 23(8), 2053–2073.\n[9] Glorot, X., Bordes, A., and Bengio, Y. (2011). Deep sparse rectiﬁer neural networks. In AISTATS’2011.\n[10] Goodfellow, I. J., Warde-Farley, D., Mirza, M., Courville, A., and Bengio, Y. (2013a). Maxout networks.\nIn ICML’2013.\n[11] Goodfellow, I. J., Mirza, M., Courville, A., and Bengio, Y. (2013b). Multi-prediction deep Boltzmann\nmachines. In NIPS’2013.\n[12] Goodfellow, I. J., Warde-Farley, D., Lamblin, P., Dumoulin, V., Mirza, M., Pascanu, R., Bergstra,\nJ., Bastien, F., and Bengio, Y. (2013c). Pylearn2: a machine learning research library. arXiv preprint\narXiv:1308.4214.\n[13] Gutmann, M. and Hyvarinen, A. (2010). Noise-contrastive estimation: A new estimation principle for\nunnormalized statistical models. In AISTATS’2010.\n[14] Hinton, G., Deng, L., Dahl, G. E., Mohamed, A., Jaitly, N., Senior, A., Vanhoucke, V., Nguyen, P.,\nSainath, T., and Kingsbury, B. (2012a). Deep neural networks for acoustic modeling in speech recognition.\nIEEE Signal Processing Magazine, 29(6), 82–97.\n[15] Hinton, G. E., Dayan, P., Frey, B. J., and Neal, R. M. (1995). The wake-sleep algorithm for unsupervised\nneural networks. Science, 268, 1558–1161.\n8\n\n\n[16] Hinton, G. E., Osindero, S., and Teh, Y. (2006). A fast learning algorithm for deep belief nets. Neural\nComputation, 18, 1527–1554.\n[17] Hinton, G. E., Srivastava, N., Krizhevsky, A., Sutskever, I., and Salakhutdinov, R. (2012b). Improving\nneural networks by preventing co-adaptation of feature detectors. Technical report, arXiv:1207.0580.\n[18] Hyv¨arinen, A. (2005). Estimation of non-normalized statistical models using score matching. J. Machine\nLearning Res., 6.\n[19] Jarrett, K., Kavukcuoglu, K., Ranzato, M., and LeCun, Y. (2009). What is the best multi-stage architecture\nfor object recognition? In Proc. International Conference on Computer Vision (ICCV’09), pages 2146–2153.\nIEEE.\n[20] Kingma, D. P. and Welling, M. (2014). Auto-encoding variational bayes. In Proceedings of the Interna-\ntional Conference on Learning Representations (ICLR).\n[21] Krizhevsky, A. and Hinton, G. (2009). Learning multiple layers of features from tiny images. Technical\nreport, University of Toronto.\n[22] Krizhevsky, A., Sutskever, I., and Hinton, G. (2012). ImageNet classiﬁcation with deep convolutional\nneural networks. In NIPS’2012.\n[23] LeCun, Y., Bottou, L., Bengio, Y., and Haffner, P. (1998). Gradient-based learning applied to document\nrecognition. Proceedings of the IEEE, 86(11), 2278–2324.\n[24] Rezende, D. J., Mohamed, S., and Wierstra, D. (2014). Stochastic backpropagation and approximate\ninference in deep generative models. Technical report, arXiv:1401.4082.\n[25] Rifai, S., Bengio, Y., Dauphin, Y., and Vincent, P. (2012). A generative process for sampling contractive\nauto-encoders. In ICML’12.\n[26] Salakhutdinov, R. and Hinton, G. E. (2009). Deep Boltzmann machines. In AISTATS’2009, pages 448–\n455.\n[27] Smolensky, P. (1986). Information processing in dynamical systems: Foundations of harmony theory. In\nD. E. Rumelhart and J. L. McClelland, editors, Parallel Distributed Processing, volume 1, chapter 6, pages\n194–281. MIT Press, Cambridge.\n[28] Susskind, J., Anderson, A., and Hinton, G. E. (2010). The Toronto face dataset. Technical Report UTML\nTR 2010-001, U. Toronto.\n[29] Tieleman, T. (2008). Training restricted Boltzmann machines using approximations to the likelihood\ngradient. In W. W. Cohen, A. McCallum, and S. T. Roweis, editors, ICML 2008, pages 1064–1071. ACM.\n[30] Vincent, P., Larochelle, H., Bengio, Y., and Manzagol, P.-A. (2008). Extracting and composing robust\nfeatures with denoising autoencoders. In ICML 2008.\n[31] Younes, L. (1999).\nOn the convergence of Markovian stochastic algorithms with rapidly decreasing\nergodicity rates. Stochastics and Stochastic Reports, 65(3), 177–228.\n9\n"
}